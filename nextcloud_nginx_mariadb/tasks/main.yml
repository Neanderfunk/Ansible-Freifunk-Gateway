- include_vars: passwords.yml

- name: Installiere python-pymysql Abhängigkeit für ansible
  apt:
    name: "python3-pymysql"
    install_recommends: yes
    state: present
  become: yes


- name: Installiere MariaDB
  apt:
    name: "{{ packages }}"
    install_recommends: yes
    state: present
  vars:
    packages:
      - mariadb-server
  become: yes

- name: Abhängigkeiten für OnlyOffice Dokumentserver installieren
  block:
    - name: Dokumentserver - Install required system packages
      apt: name={{ item }} state=latest update_cache=yes
      loop: [ 'apt-transport-https', 'ca-certificates', 'curl', 'software-properties-common', 'python3-pip', 'virtualenv', 'python3-setuptools']

    - name: Dokumentserver - Add Docker GPG apt Key
      apt_key:
        url: https://download.docker.com/linux/ubuntu/gpg
        state: present

    - name: Dokumentserver - Add Docker Repository
      apt_repository:
        repo: deb https://download.docker.com/linux/ubuntu bionic stable
        state: present

    - name: Dokumentserver - Update apt and install docker-ce and docker-compose
      apt:
        name: "{{ packages }}"
        update_cache: yes
        state: latest
      vars:
        packages:
          - docker-ce
          - docker-compose

    - name: Dokumentserver - Install Docker Module for Python
      pip:
        name: docker
  when: nextcloud_onlyoffice_enable
  become: yes

- name: Kopiere MariaDB Server Anpassungen
  copy:
    src: 99-anpassungen.cnf
    dest: /etc/mysql/mariadb.conf.d/99-anpassungen.cnf
  become: yes
  notify: restart mariadb

- name: Installiere nginx
  apt:
    name: "{{ packages }}"
    install_recommends: yes
    state: present
  vars:
    packages:
      - nginx
  become: yes

- name: PHP | Install Ondrej PHP PPA
  apt_repository:
    repo: 'ppa:ondrej/php'
    update_cache: yes
  become: yes

- name: Installiere redis-server
  apt:
    name: redis-server
    install_recommends: yes
    state: present
  become: yes

- name: Konfiguriere redis-server
  lineinfile:
    path: /etc/redis/redis.conf
    regexp: "{{ item.regex }}"
    insertafter: "{{ item.insertafter }}"
    line: "{{ item.line }}"
  loop:
    - { regex: '^unixsocket /var/run/redis/redis.sock', insertafter: '^# unixsocket ', line: 'unixsocket /var/run/redis/redis.sock' }
    - { regex: '^unixsocketperm 770', insertafter: '^# unixsocketperm ',  line: 'unixsocketperm 770' }
  become: yes
  notify: restart redis-server

- name: Füge www-data Benutzer der redis Gruppe hinzu
  user:
    name: www-data
    groups: redis
    append: yes
  become: yes

- name: Installiere PHP-FPM mit allen Modulen
  apt:
    name: "{{ packages }}"
    install_recommends: yes
    state: present
  vars:
    packages:
      - php7.4-cli
      - php7.4-fpm
      - php7.4-gd
      - php7.4-mysql
      - php7.4-curl
      - php7.4-mbstring
      - php7.4-intl
      - php7.4-gmp
      - php7.4-bcmath
      - php-imagick
      - php7.4-xml
      - php7.4-zip
      - php7.4-bz2
      - php-redis
      - php-apcu
  become: yes

- name: Kopiere php-fpm benutzerdefinierte Konfigurationsanpassungen
  copy:
    src: php_customconf.ini
    dest: /etc/php/7.4/fpm/conf.d/99_anpassungen.ini
  become: yes
  notify: restart php-fpm

- name: Deaktiviere default Konfiguration.
  file:
    path: "/etc/nginx/sites-enabled/default"
    state: absent
  become: yes
  notify: restart nginx


- name: acme install
  shell: wget -O -  https://get.acme.sh | sh
  args:
    creates: /root/.acme.sh/acme.sh
  become: yes

# erstelle ssl ordner
- name: Erstelle ssl Ordner
  file:
    path: /etc/nginx/ssl
    state: directory
    owner: root
    group: root
  become: yes

# erstelle dh-params
- name: Erstelle dh-params.
  command: openssl dhparam -out /etc/nginx/ssl/dhparam-4096.pem 4096
  args:
    creates: /etc/nginx/ssl/dhparam-4096.pem
  become: yes

- name: Entferne /var/www/html Ordner
  file:
    state: absent
    path: "/var/www/html"
  become: yes

- name: Merge Domain Listen für acme
  set_fact:
    acme_domains: "{{ nextcloud_domains + nextcloud_onlyoffice_domain }}"

- name: Prüfe ob Zertifikat(e) vorhanden und kein First-Setup ausgeführt werden muss.
  stat:
    path: /root/.acme.sh/{{ item }}_ecc/{{ item }}.cer
  with_items: "{{ acme_domains }}"
  register: acmecertsvorher
  become: yes

# - name: Zertifikat Prüfung vorher
#   debug:
#     var: acmecertsvorher

- name: Prüfe ob nginx gestoppt werden muss für einen First-Setup acme Run
  set_fact:
    acme_first_setup_run: yes
  when: item.stat.exists == false
  with_items: "{{ acmecertsvorher.results }}"

# - name: First setup run
#   debug:
#     var: acme_first_setup_run

- name: Stoppe nginx für acme standalone
  systemd:
    state: stopped
    name: nginx.service
  when: acme_first_setup_run
  become: yes

- name: Hole Zertifikat per acme standalone
  command:
    cmd: /root/.acme.sh/acme.sh --issue --standalone -d {{ item }} -k ec-384
    creates: /root/.acme.sh/{{ item }}_ecc/{{ item }}.cer
  with_items: "{{ acme_domains }}"
  register: acmecertsgeholt
  become: yes

- name: Starte nginx nach acme standalone
  systemd:
    state: started
    name: nginx.service
  become: yes

- name: Prüfe ob Zertifikat(e) vorhanden
  stat:
    path: /root/.acme.sh/{{ item }}_ecc/{{ item }}.cer
  with_items: "{{ acme_domains }}"
  register: acmecerts
  become: yes

# - name: Zertifikat Prüfung
#   debug:
#     var: acmecerts
#
# - name: Zertifikate geholt
#   debug:
#     var: acmecertsgeholt


- name: Installiere Zertifikat
  command:
    cmd: /root/.acme.sh/acme.sh --install-cert -d {{ item.item }} --key-file /etc/nginx/ssl/{{ item.item }}.key --fullchain-file /etc/nginx/ssl/{{ item.item }}-fullchain.pem --reloadcmd "systemctl force-reload nginx.service" --ecc
  when: item.changed
  with_items: "{{ acmecertsgeholt.results }}"
  become: yes

- name: acme.sh Register Account
  command: "/root/.acme.sh/acme.sh --register-account"
  register: acme_register_account
  changed_when: false
  failed_when: "'ACCOUNT_THUMBPRINT' not in acme_register_account.stdout"
  become: yes

# - name: DEBUG ausgabe acme account
#   debug:
#     var: acme_register_account

- name: Set Fact acme ACCOUNT_THUMBPRINT
  set_fact:
    acme_account_thumbprint: "{{ acme_register_account.stdout_lines[2].split('=')[1] | replace(\"'\", '') }}"

- name: Erstelle nextcloud Datenbank
  mysql_db:
    name: nextcloud
    encoding: utf8mb4
    login_unix_socket: /run/mysqld/mysqld.sock
    state: present
  become: yes

- name: Erstelle nextcloud Datenbank Account
  mysql_user:
    name: nextcloud
    password: '{{ mysql_nextcloud_password }}'
    priv: 'nextcloud.*:ALL'
    login_unix_socket: /run/mysqld/mysqld.sock
    state: present
  become: yes


- name: Prüfe ob nextcloud schon installiert ist
  stat:
    path: /var/www/nextcloud
  register: nextcloudinstalled

- name: Erstelle Nextcloud Ordner
  file:
    path: "/var/www/nextcloud"
    owner: www-data
    group: www-data
    mode: '0755'
    state: directory
  when: not nextcloudinstalled.stat.exists
  become: yes

- name: Downloade die neuste Nextcloud Version und entpacke sie nach /var/www/nextcloud
  unarchive:
    src: https://download.nextcloud.com/server/releases/latest.tar.bz2
    remote_src: yes
    dest: /var/www
    owner: "www-data"
    group: "www-data"
  register: newnextcloud
  when: not nextcloudinstalled.stat.exists
  become: yes

- name: Erstelle nginx allgemeine nextcloud Konfiguration
  copy:
    src: nextcloud_phphandler.conf
    dest: /etc/nginx/conf.d/99_nextcloud_phphandler.conf
  become: yes
  notify: reload nginx

- name: Erstelle nextcloud site nginx Konfiguration
  template:
    src: nextcloud-nginx.j2
    dest: /etc/nginx/sites-available/{{ item }}.conf
  with_items: '{{ nextcloud_domains }}'
  become: yes
  notify: reload nginx

- name: Erstelle PHP pool Konfiguration
  template:
    src: nextcloud-phppool.j2
    dest: /etc/php/7.4/fpm/pool.d/nextcloud.conf
  become: yes
  notify: restart php-fpm

- name: Aktiviere die nextcloud nginx Konfiguration
  file:
    src: /etc/nginx/sites-available/{{ item }}.conf
    path: /etc/nginx/sites-enabled/{{ item }}.conf
    state: link
  with_items: '{{ nextcloud_domains }}'
  become: yes
  notify: reload nginx

- name: Erstelle dokumentserver site nginx Konfiguration
  template:
    src: dokumentserver-nginx.j2
    dest: /etc/nginx/sites-available/{{ item }}.conf
  with_items: '{{ nextcloud_onlyoffice_domain }}'
  become: yes
  notify: reload nginx

- name: Aktiviere die dokumentserver nginx Konfiguration
  file:
    src: /etc/nginx/sites-available/{{ item }}.conf
    path: /etc/nginx/sites-enabled/{{ item }}.conf
    state: link
  with_items: '{{ nextcloud_onlyoffice_domain }}'
  become: yes
  notify: reload nginx

- name: Erstelle Nextcloud Daten Ordner
  file:
    path: "{{ item }}"
    owner: www-data
    group: www-data
    mode: '0770'
    state: directory
  loop:
    - "/clouddata"
    - "/clouddata/data"
  become: yes

# - name: Debug
#   debug:
#     var: newnextcloud

- name: Installiere nextcloud
  command: sudo -u www-data php occ maintenance:install --database "mysql" --database-name "nextcloud" --database-user "nextcloud" --database-pass "{{ mysql_nextcloud_password }}" --admin-user "{{ nextcloud_admin }}" --admin-pass "{{ nextcloud_admin_password }}" --data-dir "/clouddata/data"
  args:
    chdir: /var/www/nextcloud/
  when: newnextcloud.changed
  become: yes


- name: Hole trusted Domains
  command: php occ config:system:get trusted_domains
  args:
    chdir: /var/www/nextcloud/
  register: nextcloud_trusted_domains
  changed_when: false
  become: yes
  become_user: www-data

- name: Setze trusted Domains
  command: "sudo -u www-data php occ config:system:set trusted_domains {{ nextcloud_trusted_domains.stdout_lines|length  + my_index }} --value={{ item }}"
  args:
    chdir: /var/www/nextcloud/
  register: nextcloud_trusted_domains
  loop: "{{ nextcloud_domains }}"
  loop_control:
    index_var: my_index
  when: item not in nextcloud_trusted_domains.stdout_lines
  become: yes

# - name: Trusted Domains hinterlegt
#   debug:
#     var: nextcloud_trusted_domains

- name: Erstelle Dokument Server container
  block:
    - name: Dokumentserver - Erstelle Ordner
      file:
        path: "{{ item }}"
        owner: root
        group: root
        mode: '0770'
        state: directory
        recurse: yes
      loop:
        - "/opt/onlyoffice/DocumentServerData"

    - name: Dokumentserver - checke ob JWT-Token Datei existiert
      stat:
        path: /opt/onlyoffice/token.txt
      register: onlyoffice_jwttoken_file_stat

    - name: Dokumentserver - Generiere JWT Token
      shell: date | sha1sum |cut -d' ' -f1
      register: generate_onlyoffice_jwttoken
      when: onlyoffice_jwttoken_file_stat.stat.exists == false

    - name: Dokumentserver - Speichere JWT Token
      copy:
        content: "{{ generate_onlyoffice_jwttoken.stdout }}"
        dest: /opt/onlyoffice/token.txt
        owner: root
        group: root
        mode: 660
      when: onlyoffice_jwttoken_file_stat.stat.exists == false

    - name: Dokumentserver - Lade JWT-Token Datei
      slurp:
        src: /opt/onlyoffice/token.txt
      register: onlyoffice_jwttoken_file
      when: onlyoffice_jwttoken_file_stat.stat.exists == true

    - name: Dokumentserver - Setze JWT-Token Fakt von Datei
      set_fact:
        nextcloud_onlyoffice_jwtsecret: "{{ onlyoffice_jwttoken_file['content'] | b64decode | replace('\n', '') }}"
      when: onlyoffice_jwttoken_file_stat.stat.exists == true

    - name: Dokumentserver - Setze JWT-Token Fakt von der Generierung
      set_fact:
        nextcloud_onlyoffice_jwtsecret: "{{ generate_onlyoffice_jwttoken.stdout }}"
      when: onlyoffice_jwttoken_file_stat.stat.exists == false

    - name: Dokumentserver - Erstelle docker-compose Datei
      template:
        src: dokumentserver_compose.yml.j2
        dest: /opt/onlyoffice/docker-compose.yml

    - name: Dokumentserver - Hole docker image onlyoffice/documentserver
      docker_image:
        name: "onlyoffice/documentserver"
        source: pull

    - name: Dokumentserver - Starte docker container mit compose
      docker_compose:
        project_src: /opt/onlyoffice

  when: nextcloud_onlyoffice_enable
  become: yes

- name: Konfiguriere nextcloud
  command: php occ config:system:set {{ item }}
  args:
    chdir: /var/www/nextcloud/
  with_items: '{{ nextcloud_config }}'
  become: yes
  become_user: www-data

- name: Hinterlege cronjob für nextcloud
  cron:
    name: "nextcloud Hintergrunddienst"
    minute: "*/5"
    job: "php -f /var/www/nextcloud/cron.php"
    user: www-data
  become: yes

- name: acme cert list zu dict umwandeln
  set_fact:
    acmecertsdict: "{{ acmecertsdict|default({}) | combine( {item.item: item} ) }}"
  with_items: "{{ acmecerts.results }}"

- name: reload nginx
  systemd:
    name: nginx.service
    state: reloaded
  become: yes

- name: Prüfe ob Zertifikate schon umgestellt sind (nextcloud)
  lineinfile:
    name: /root/.acme.sh/{{ item }}_ecc/{{ item }}.conf
    regexp: "^Le_Webroot='/var/www/nextcloud'"
    state: absent
  check_mode: yes
  changed_when: false
  register: certifikate_nextcloud_modus
  with_items: "{{ nextcloud_domains }}"

# - name: Debug certifikate_nextcloud_modus
#   debug:
#     var: certifikate_nextcloud_modus

- name: acme cert modus list zu dict umwandeln
  set_fact:
    certifikate_nextcloud_modus_dict: "{{ certifikate_nextcloud_modus_dict|default({}) | combine( {item.item: item} ) }}"
  with_items: "{{ certifikate_nextcloud_modus.results }}"

- name: Stelle um Zertifikat per acme webroot
  command:
    cmd: /root/.acme.sh/acme.sh --issue -w /var/www/nextcloud -d {{ item }} -f -k ec-384
  when:
    - acmecertsdict[item].stat.exists
    - not certifikate_nextcloud_modus_dict[item].found
  with_items: "{{ nextcloud_domains }}"
  become: yes

- name: Prüfe ob Zertifikate schon umgestellt sind (onlyoffice)
  lineinfile:
    name: /root/.acme.sh/{{ item }}_ecc/{{ item }}.conf
    regexp: "^Le_Webroot='stateless'"
    state: absent
  check_mode: yes
  changed_when: false
  register: certifikate_onlyoffice_modus
  with_items: "{{ nextcloud_onlyoffice_domain }}"

# - name: Debug certifikate_nextcloud_modus
#   debug:
#     var: certifikate_onlyoffice_modus

- name: acme cert modus list zu dict umwandeln
  set_fact:
    certifikate_onlyoffice_modus_dict: "{{ certifikate_onlyoffice_modus_dict|default({}) | combine( {item.item: item} ) }}"
  with_items: "{{ certifikate_onlyoffice_modus.results }}"

- name: Stelle um Zertifikat per acme webroot
  command:
    cmd: /root/.acme.sh/acme.sh --issue --stateless -d {{ item }} -f -k ec-384
  when:
    - acmecertsdict[item].stat.exists
    - not certifikate_onlyoffice_modus_dict[item].found
  with_items: "{{ nextcloud_onlyoffice_domain }}"
  become: yes
